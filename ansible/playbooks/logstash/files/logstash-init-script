#! /bin/sh
### BEGIN INIT INFO
# Provides:          logstash
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:  Start logstash.
### END INIT INFO


# description: starts up logstash in daemon mode.
# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Manage logstash process"
NAME=logstash
WORKER_PATH=/opt/logstash/bin
DAEMON=$WORKER_PATH/run.sh
#DAEMON_ARGS="run"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
PROCESS_OWNER="ubuntu"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0
# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#

running_pid() {
  pid=$1
  name=$2
  [ -z "$pid" ] && return 1
  [ ! -d /proc/$pid ] &&  return 1
  cmd=`cat /proc/$pid/cmdline | tr '\000' '\n' | awk 'NR==2'`
  [ "$cmd" != "$name" ] &&  return 1
  return 0
}

running() {
  [ ! -f "$PIDFILE" ] && return 1
  pid=`cat $PIDFILE`
  running_pid $pid $DAEMON || return 1
  return 0
}

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
  #start-stop-daemon  -b -m --start -d $WORKER_PATH  --user ubuntu --pidfile /var/run/logstash.pid  --startas $DAEMON -- $DAEMON_ARGS
  start-stop-daemon -b -m --start -d $WORKER_PATH  -c $PROCESS_OWNER --pidfile $PIDFILE  --startas $DAEMON
  if [ $? -eq 0 ] ;then 
    echo "$NAME successfully started"
  fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
  pkill -TERM -P  $(cat $PIDFILE)
  if [ $? -eq 0 ] ;then 
    echo "$NAME successfully stopped"
  fi

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
}
    
case "$1" in
  start)
    if running ;  then
      echo "$NAME already started"
      exit 0
    fi
	  do_start
  ;;

  stop)
    if ! running ;  then
      echo "$NAME already stopped"
      exit 0
    fi
	  do_stop
  ;;

  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;
  restart)
    if ! running ;  then
      echo "$NAME apparently not started, try a simple start..." 
  	  do_start
    else
	    do_stop
	    case "$?" in
	      0|1)
	        do_start
	        case "$?" in
	        	0) log_end_msg 0 ;;
	        	1) log_end_msg 1 ;; # Old process is still running
	        	*) log_end_msg 1 ;; # Failed to start
	        esac
	        ;;
	      *)
	        # Failed to stop
		      log_end_msg 1
		      ;;
	    esac
    fi
  ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
